{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/mokshainvestment/lib/supabase/middleware.ts"],"sourcesContent":["// import { NextResponse } from 'next/server'\r\n// import type { NextRequest } from 'next/server'\r\n\r\n// export function middleware(request: NextRequest) {\r\n//   // Temporary: allow all requests until we fix the auth\r\n//   return NextResponse.next()\r\n// }\r\n\r\n// export const config = {\r\n//   matcher: ['/admin/:path*']\r\n// }\r\n\r\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\r\nimport { NextResponse } from 'next/server'\r\nimport type { NextRequest } from 'next/server'\r\n\r\n// This function is now self-contained and will be used directly in the main middleware file.\r\nexport async function updateSession(request: NextRequest) {\r\n  // This `createMiddlewareClient` will have access to the request cookies.\r\n  const supabase = createMiddlewareClient({ req: request, res: NextResponse.next() })\r\n\r\n  // Refresh session if expired - required for Server Components\r\n  // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-session-with-middleware\r\n  await supabase.auth.getSession()\r\n\r\n  return NextResponse.next()\r\n}"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,iDAAiD;AAEjD,qDAAqD;AACrD,2DAA2D;AAC3D,+BAA+B;AAC/B,IAAI;AAEJ,0BAA0B;AAC1B,+BAA+B;AAC/B,IAAI;;;;;AAEJ;AACA;AAAA;;;AAIO,eAAe,cAAc,OAAoB;IACtD,yEAAyE;IACzE,MAAM,WAAW,IAAA,8NAAsB,EAAC;QAAE,KAAK;QAAS,KAAK,oNAAY,CAAC,IAAI;IAAG;IAEjF,8DAA8D;IAC9D,6FAA6F;IAC7F,MAAM,SAAS,IAAI,CAAC,UAAU;IAE9B,OAAO,oNAAY,CAAC,IAAI;AAC1B"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/mokshainvestment/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { createSupabaseMiddlewareClient } from '@/lib/supabase/middleware';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const response = NextResponse.next();\r\n  const supabase = createSupabaseMiddlewareClient(request, response);\r\n\r\n  const {\r\n    data: { session },\r\n  } = await supabase.auth.getSession();\r\n\r\n  const { pathname } = request.nextUrl;\r\n\r\n  // If the user is not authenticated and trying to access a protected route\r\n  if (!session && pathname.startsWith('/admin/dashboard')) {\r\n    // Redirect them to the login page\r\n    const loginUrl = new URL('/admin/login', request.url);\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n\r\n  // If the user is authenticated and tries to access the login page\r\n  if (session && pathname === '/admin/login') {\r\n    // Redirect them to the dashboard\r\n    const dashboardUrl = new URL('/admin/dashboard', request.url);\r\n    return NextResponse.redirect(dashboardUrl);\r\n  }\r\n  \r\n  return response;\r\n}\r\n\r\nexport const config = {\r\n  matcher: ['/admin/dashboard', '/admin/login'],\r\n};"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,WAAW,oNAAY,CAAC,IAAI;IAClC,MAAM,WAAW,IAAA,2LAA8B,EAAC,SAAS;IAEzD,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAElC,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,0EAA0E;IAC1E,IAAI,CAAC,WAAW,SAAS,UAAU,CAAC,qBAAqB;QACvD,kCAAkC;QAClC,MAAM,WAAW,IAAI,IAAI,gBAAgB,QAAQ,GAAG;QACpD,OAAO,oNAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,kEAAkE;IAClE,IAAI,WAAW,aAAa,gBAAgB;QAC1C,iCAAiC;QACjC,MAAM,eAAe,IAAI,IAAI,oBAAoB,QAAQ,GAAG;QAC5D,OAAO,oNAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAoB;KAAe;AAC/C"}}]
}