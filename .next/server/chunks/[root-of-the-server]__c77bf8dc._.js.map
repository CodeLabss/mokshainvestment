{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tarak/Desktop/mokshainvestment/mokshainvestment/app/api/admin/companies/route.ts"],"sourcesContent":["// import { NextRequest, NextResponse } from \"next/server\";\r\n// import { createClient } from \"@supabase/supabase-js\";\r\n\r\n// // Use service role key on server side\r\n// const supabase = createClient(\r\n//   process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n//   process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n// );\r\n\r\n// export async function GET() {\r\n//   try {\r\n//     const { data, error } = await supabase\r\n//       .from(\"insurance_companies\")\r\n//       .select(\"*\")\r\n//       .order(\"created_at\", { ascending: false });\r\n\r\n//     if (error) {\r\n//       return NextResponse.json({ error: error.message }, { status: 500 });\r\n//     }\r\n\r\n//     return NextResponse.json({ data });\r\n//   } catch (error) {\r\n//     return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n//   }\r\n// }\r\n\r\n// export async function POST(request: NextRequest) {\r\n//   try {\r\n//     const { name, logoUrl, categoryId } = await request.json();\r\n\r\n//     if (!name) {\r\n//       return NextResponse.json({ error: \"Company name is required\" }, { status: 400 });\r\n//     }\r\n\r\n//     // Create company with default category_id if not provided\r\n//     // Generate a default UUID for category_id if not provided\r\n//     const defaultCategoryId = \"550e8400-e29b-41d4-a716-446655440000\"; // Default UUID for \"General\" category\r\n    \r\n//     const companyData = {\r\n//       name,\r\n//       logo_url: logoUrl,\r\n//       category_id: categoryId || defaultCategoryId // Default to a UUID if not provided\r\n//     };\r\n\r\n//     const { data, error } = await supabase\r\n//       .from(\"insurance_companies\")\r\n//       .insert([companyData])\r\n//       .select();\r\n\r\n//     if (error) {\r\n//       return NextResponse.json({ error: error.message }, { status: 500 });\r\n//     }\r\n\r\n//     return NextResponse.json({ data: data[0] });\r\n//   } catch (error) {\r\n//     return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n//   }\r\n// }\r\n\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// GET all companies\r\nexport async function GET() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"insurance_companies\")\r\n      .select(\"*\")\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) return NextResponse.json({ error: error.message }, { status: 500 });\r\n    return NextResponse.json({ data });\r\n  } catch (err: any) {\r\n    return NextResponse.json({ error: err.message || \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST new company\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { name, logoUrl, categoryId } = await req.json();\r\n    if (!name) return NextResponse.json({ error: \"Company name is required\" }, { status: 400 });\r\n\r\n    const defaultCategoryId = \"550e8400-e29b-41d4-a716-446655440000\"; \r\n\r\n    const { data, error } = await supabase\r\n      .from(\"insurance_companies\")\r\n      .insert([{ name, logo_url: logoUrl, category_id: categoryId || defaultCategoryId }])\r\n      .select();\r\n\r\n    if (error) return NextResponse.json({ error: error.message }, { status: 500 });\r\n    return NextResponse.json({ data: data[0] });\r\n  } catch (err: any) {\r\n    return NextResponse.json({ error: err.message || \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"AAAA,2DAA2D;AAC3D,wDAAwD;AAExD,yCAAyC;AACzC,iCAAiC;AACjC,2CAA2C;AAC3C,2CAA2C;AAC3C,KAAK;AAEL,gCAAgC;AAChC,UAAU;AACV,6CAA6C;AAC7C,qCAAqC;AACrC,qBAAqB;AACrB,oDAAoD;AAEpD,mBAAmB;AACnB,6EAA6E;AAC7E,QAAQ;AAER,0CAA0C;AAC1C,sBAAsB;AACtB,qFAAqF;AACrF,MAAM;AACN,IAAI;AAEJ,qDAAqD;AACrD,UAAU;AACV,kEAAkE;AAElE,mBAAmB;AACnB,0FAA0F;AAC1F,QAAQ;AAER,iEAAiE;AACjE,iEAAiE;AACjE,+GAA+G;AAE/G,4BAA4B;AAC5B,cAAc;AACd,2BAA2B;AAC3B,0FAA0F;AAC1F,SAAS;AAET,6CAA6C;AAC7C,qCAAqC;AACrC,+BAA+B;AAC/B,mBAAmB;AAEnB,mBAAmB;AACnB,6EAA6E;AAC7E,QAAQ;AAER,mDAAmD;AACnD,sBAAsB;AACtB,qFAAqF;AACrF,MAAM;AACN,IAAI;;;;;;;AAGJ;AACA;;;AAEA,MAAM,WAAW,IAAA,6NAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAIhC,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,uBACL,MAAM,CAAC,KACP,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,OAAO,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;QAC5E,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE;QAAK;IAClC,EAAE,OAAO,KAAU;QACjB,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,OAAO,IAAI;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC5F;AACF;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,IAAI;QACpD,IAAI,CAAC,MAAM,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;QAEzF,MAAM,oBAAoB;QAE1B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,uBACL,MAAM,CAAC;YAAC;gBAAE;gBAAM,UAAU;gBAAS,aAAa,cAAc;YAAkB;SAAE,EAClF,MAAM;QAET,IAAI,OAAO,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;QAC5E,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,MAAM,IAAI,CAAC,EAAE;QAAC;IAC3C,EAAE,OAAO,KAAU;QACjB,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,OAAO,IAAI;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC5F;AACF","debugId":null}}]
}