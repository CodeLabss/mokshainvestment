{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tarak/Desktop/mokshainvestment/mokshainvestment/app/api/admin/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n// Use service role key on server side\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// Function to sanitize filename for storage\r\nfunction sanitizeFileName(fileName: string): string {\r\n  // Remove or replace invalid characters\r\n  // Keep only alphanumeric, dots, hyphens, and underscores\r\n  return fileName\r\n    .replace(/[^a-zA-Z0-9.-]/g, '_') // Replace invalid chars with underscore\r\n    .replace(/_{2,}/g, '_') // Replace multiple underscores with single\r\n    .toLowerCase(); // Convert to lowercase for consistency\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const formData = await request.formData();\r\n    const file = formData.get(\"file\") as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json({ error: \"No file provided\" }, { status: 400 });\r\n    }\r\n\r\n    // Get file extension\r\n    const fileExtension = file.name.split('.').pop() || '';\r\n    const nameWithoutExt = file.name.split('.').slice(0, -1).join('.');\r\n    const sanitizedName = nameWithoutExt ? sanitizeFileName(nameWithoutExt) : 'logo';\r\n    \r\n    // Create a safe filename with timestamp\r\n    const fileName = `${Date.now()}-${sanitizedName}.${fileExtension}`;\r\n    \r\n    console.log(`Uploading file: ${file.name} -> ${fileName}`);\r\n    \r\n    const { data, error } = await supabase.storage\r\n      .from(\"company-logos\")\r\n      .upload(fileName, file);\r\n\r\n    if (error) {\r\n      console.error(\"Supabase upload error:\", error);\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n\r\n    const { data: publicUrl } = supabase.storage\r\n      .from(\"company-logos\")\r\n      .getPublicUrl(fileName);\r\n\r\n    return NextResponse.json({ \r\n      url: publicUrl.publicUrl,\r\n      fileName: data.path \r\n    });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,sCAAsC;AACtC,MAAM,WAAW,IAAA,6NAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGvC,4CAA4C;AAC5C,SAAS,iBAAiB,QAAgB;IACxC,uCAAuC;IACvC,yDAAyD;IACzD,OAAO,SACJ,OAAO,CAAC,mBAAmB,KAAK,wCAAwC;KACxE,OAAO,CAAC,UAAU,KAAK,2CAA2C;KAClE,WAAW,IAAI,uCAAuC;AAC3D;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,oKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,qBAAqB;QACrB,MAAM,gBAAgB,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM;QACpD,MAAM,iBAAiB,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAC9D,MAAM,gBAAgB,iBAAiB,iBAAiB,kBAAkB;QAE1E,wCAAwC;QACxC,MAAM,WAAW,GAAG,KAAK,GAAG,GAAG,CAAC,EAAE,cAAc,CAAC,EAAE,eAAe;QAElE,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,UAAU;QAEzD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,OAAO,CAC3C,IAAI,CAAC,iBACL,MAAM,CAAC,UAAU;QAEpB,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,oKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,MAAM,EAAE,MAAM,SAAS,EAAE,GAAG,SAAS,OAAO,CACzC,IAAI,CAAC,iBACL,YAAY,CAAC;QAEhB,OAAO,oKAAY,CAAC,IAAI,CAAC;YACvB,KAAK,UAAU,SAAS;YACxB,UAAU,KAAK,IAAI;QACrB;IACF,EAAE,OAAO,OAAO;QACd,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}