{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tarak/Desktop/mokshainvestment/mokshainvestment/app/api/companies/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY! // anon key is fine for read-only\r\n);\r\n\r\nexport async function GET() {\r\n  try {\r\n    // 1. Fetch categories\r\n    const { data: categories, error: categoriesError } = await supabase\r\n      .from(\"insurance_categories\")\r\n      .select(\"*\");\r\n\r\n    if (categoriesError) {\r\n      throw categoriesError;\r\n    }\r\n\r\n    // 2. Fetch companies (with category info)\r\n    const { data: companies, error: companiesError } = await supabase\r\n      .from(\"insurance_companies\")\r\n      .select(\"id, name, logo_url, category_id\");\r\n\r\n    if (companiesError) {\r\n      throw companiesError;\r\n    }\r\n\r\n    // 3. Group companies under categories\r\n    const grouped: Record<string, any> = {};\r\n    categories.forEach((cat) => {\r\n      grouped[cat.name] = {\r\n        category: {\r\n          id: cat.id,\r\n          name: cat.name,\r\n          icon: cat.icon || \"🏢\",\r\n          description: \"Category description placeholder\", // add real desc later if you have column\r\n        },\r\n        companies: companies.filter((c) => c.category_id === cat.id),\r\n      };\r\n    });\r\n\r\n    return NextResponse.json({ companies: grouped });\r\n  } catch (error: any) {\r\n    console.error(error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch companies\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,6NAAY;AAKtB,eAAe;IACpB,IAAI;QACF,sBAAsB;QACtB,MAAM,EAAE,MAAM,UAAU,EAAE,OAAO,eAAe,EAAE,GAAG,MAAM,SACxD,IAAI,CAAC,wBACL,MAAM,CAAC;QAEV,IAAI,iBAAiB;YACnB,MAAM;QACR;QAEA,0CAA0C;QAC1C,MAAM,EAAE,MAAM,SAAS,EAAE,OAAO,cAAc,EAAE,GAAG,MAAM,SACtD,IAAI,CAAC,uBACL,MAAM,CAAC;QAEV,IAAI,gBAAgB;YAClB,MAAM;QACR;QAEA,sCAAsC;QACtC,MAAM,UAA+B,CAAC;QACtC,WAAW,OAAO,CAAC,CAAC;YAClB,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG;gBAClB,UAAU;oBACR,IAAI,IAAI,EAAE;oBACV,MAAM,IAAI,IAAI;oBACd,MAAM,IAAI,IAAI,IAAI;oBAClB,aAAa;gBACf;gBACA,WAAW,UAAU,MAAM,CAAC,CAAC,IAAM,EAAE,WAAW,KAAK,IAAI,EAAE;YAC7D;QACF;QAEA,OAAO,oKAAY,CAAC,IAAI,CAAC;YAAE,WAAW;QAAQ;IAChD,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC;QACd,OAAO,oKAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}