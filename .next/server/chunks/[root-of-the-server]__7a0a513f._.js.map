{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tarak/Desktop/mokshainvestment/mokshainvestment/app/api/admin/seed-categories/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\nconst initialCategories = [\r\n  { name: \"Life Insurance\", icon: \"❤️\" },\r\n  { name: \"Health Insurance\", icon: \"🏥\" },\r\n  { name: \"Motor Insurance\", icon: \"🚗\" },\r\n  { name: \"Home Insurance\", icon: \"🏠\" },\r\n  { name: \"Travel Insurance\", icon: \"✈️\" },\r\n  { name: \"Business Insurance\", icon: \"🏢\" },\r\n];\r\n\r\nexport async function POST() {\r\n  try {\r\n    // First check if categories already exist\r\n    const { data: existingCategories, error: checkError } = await supabase\r\n      .from(\"insurance_categories\")\r\n      .select(\"id\");\r\n\r\n    if (checkError) {\r\n      console.error(\"Error checking existing categories:\", checkError);\r\n      return NextResponse.json({ error: checkError.message }, { status: 500 });\r\n    }\r\n\r\n    if (existingCategories && existingCategories.length > 0) {\r\n      return NextResponse.json({\r\n        message: \"Categories already exist\",\r\n        categories: existingCategories,\r\n      });\r\n    }\r\n\r\n    // Insert initial categories\r\n    const { data, error } = await supabase\r\n      .from(\"insurance_categories\")\r\n      .insert(initialCategories)\r\n      .select();\r\n\r\n    if (error) {\r\n      console.error(\"Error seeding categories:\", error);\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: \"Categories seeded successfully\",\r\n      categories: data,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Unexpected error:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,WAAW,IAAA,6NAAY,gFAE3B,QAAQ,GAAG,CAAC,yBAAyB;AAGvC,MAAM,oBAAoB;IACxB;QAAE,MAAM;QAAkB,MAAM;IAAK;IACrC;QAAE,MAAM;QAAoB,MAAM;IAAK;IACvC;QAAE,MAAM;QAAmB,MAAM;IAAK;IACtC;QAAE,MAAM;QAAkB,MAAM;IAAK;IACrC;QAAE,MAAM;QAAoB,MAAM;IAAK;IACvC;QAAE,MAAM;QAAsB,MAAM;IAAK;CAC1C;AAEM,eAAe;IACpB,IAAI;QACF,0CAA0C;QAC1C,MAAM,EAAE,MAAM,kBAAkB,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,SAC3D,IAAI,CAAC,wBACL,MAAM,CAAC;QAEV,IAAI,YAAY;YACd,QAAQ,KAAK,CAAC,uCAAuC;YACrD,OAAO,oKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,WAAW,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,IAAI,sBAAsB,mBAAmB,MAAM,GAAG,GAAG;YACvD,OAAO,oKAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,YAAY;YACd;QACF;QAEA,4BAA4B;QAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,wBACL,MAAM,CAAC,mBACP,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO,oKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,OAAO,oKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,YAAY;QACd;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,oKAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}